// E-System Database Setup - MongoDB Shell Script
// Run this script in MongoDB shell or MongoDB Compass

// Switch to e_system database
use e_system

print("üöÄ Starting E-System Database Setup...")

// 1. Create Collections
print("\nüìÅ Creating collections...")

// Users collection
db.createCollection("users")
print("‚úÖ Created users collection")

// Courses collection  
db.createCollection("courses")
print("‚úÖ Created courses collection")

// Attendance collection
db.createCollection("attendance")
print("‚úÖ Created attendance collection")

// Grades collection
db.createCollection("grades")
print("‚úÖ Created grades collection")

// Announcements collection
db.createCollection("announcements")
print("‚úÖ Created announcements collection")

// 2. Create Indexes
print("\nüîç Creating indexes...")

// Users indexes
db.users.createIndex({ "email": 1 }, { unique: true })
db.users.createIndex({ "role": 1 })
print("‚úÖ Users indexes created")

// Courses indexes
db.courses.createIndex({ "code": 1 }, { unique: true })
db.courses.createIndex({ "teacher": 1, "isActive": 1 })
db.courses.createIndex({ "students": 1, "isActive": 1 })
print("‚úÖ Courses indexes created")

// Attendance indexes
db.attendance.createIndex(
    { "student": 1, "course": 1, "date": 1 }, 
    { unique: true }
)
db.attendance.createIndex({ "course": 1, "date": 1 })
db.attendance.createIndex({ "student": 1, "date": 1 })
print("‚úÖ Attendance indexes created")

// Grades indexes
db.grades.createIndex({ "student": 1, "course": 1 })
db.grades.createIndex({ "course": 1, "gradeType": 1 })
db.grades.createIndex({ "student": 1, "gradeType": 1 })
print("‚úÖ Grades indexes created")

// Announcements indexes
db.announcements.createIndex({ "type": 1, "isActive": 1, "publishedAt": -1 })
db.announcements.createIndex({ "course": 1, "isActive": 1, "publishedAt": -1 })
db.announcements.createIndex({ "targetAudience": 1, "isActive": 1, "publishedAt": -1 })
print("‚úÖ Announcements indexes created")

// 3. Insert Sample Data
print("\nüìù Inserting sample data...")

// Sample Teachers
var teachers = [
    {
        fullName: "Dr. Sarah Johnson",
        email: "sarah.johnson@university.edu",
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // teacher123
        role: "teacher",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        fullName: "Prof. Michael Chen", 
        email: "michael.chen@university.edu",
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // teacher123
        role: "teacher",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        fullName: "Dr. Emily Rodriguez",
        email: "emily.rodriguez@university.edu", 
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // teacher123
        role: "teacher",
        createdAt: new Date(),
        updatedAt: new Date()
    }
]

var teacherIds = []
teachers.forEach(function(teacher) {
    var result = db.users.insertOne(teacher)
    teacherIds.push(result.insertedId)
    print("‚úÖ Inserted teacher: " + teacher.fullName)
})

// Sample Students
var students = [
    {
        fullName: "John Smith",
        email: "john.smith@student.university.edu",
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // student123
        role: "student",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        fullName: "Maria Garcia",
        email: "maria.garcia@student.university.edu",
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // student123
        role: "student",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        fullName: "David Kim",
        email: "david.kim@student.university.edu",
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // student123
        role: "student",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        fullName: "Lisa Wang",
        email: "lisa.wang@student.university.edu",
        passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // student123
        role: "student",
        createdAt: new Date(),
        updatedAt: new Date()
    }
]

var studentIds = []
students.forEach(function(student) {
    var result = db.users.insertOne(student)
    studentIds.push(result.insertedId)
    print("‚úÖ Inserted student: " + student.fullName)
})

// Sample Courses
var courses = [
    {
        title: "Introduction to Computer Science",
        description: "Fundamental concepts of programming and computer science",
        code: "CS101",
        credits: 3,
        teacher: teacherIds[0],
        students: studentIds.slice(0, 2),
        semester: "Fall",
        academicYear: "2024-2025",
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        title: "Advanced Mathematics",
        description: "Advanced mathematical concepts and problem solving",
        code: "MATH201",
        credits: 4,
        teacher: teacherIds[1],
        students: studentIds.slice(1, 3),
        semester: "Fall",
        academicYear: "2024-2025",
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        title: "English Literature",
        description: "Study of classic and contemporary literature",
        code: "ENG101",
        credits: 3,
        teacher: teacherIds[2],
        students: studentIds.slice(2, 4),
        semester: "Fall",
        academicYear: "2024-2025",
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
    }
]

var courseIds = []
courses.forEach(function(course) {
    var result = db.courses.insertOne(course)
    courseIds.push(result.insertedId)
    print("‚úÖ Inserted course: " + course.title)
})

// Sample Announcements
var announcements = [
    {
        title: "Welcome to Fall Semester 2024",
        content: "Welcome back students! We hope you had a great summer. Classes begin on September 2nd.",
        type: "general",
        author: teacherIds[0],
        targetAudience: ["all"],
        isActive: true,
        publishedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        title: "CS101 Assignment Due Date Extended",
        content: "The deadline for Assignment 1 has been extended to Friday, September 15th.",
        type: "course",
        author: teacherIds[0],
        targetAudience: ["student"],
        course: courseIds[0],
        isActive: true,
        publishedAt: new Date(),
        createdAt: new Date(),
        updatedAt: new Date()
    }
]

announcements.forEach(function(announcement) {
    db.announcements.insertOne(announcement)
    print("‚úÖ Inserted announcement: " + announcement.title)
})

// Sample Attendance Records
var today = new Date()
var attendanceCount = 0

// Create attendance records for the past week
for (var i = 0; i < 5; i++) {
    var date = new Date(today)
    date.setDate(date.getDate() - i)
    
    courses.forEach(function(course, courseIndex) {
        course.students.forEach(function(studentId) {
            var status = Math.random() > 0.1 ? "present" : "absent"
            var attendanceRecord = {
                student: studentId,
                course: courseIds[courseIndex],
                date: date,
                status: status,
                recordedBy: course.teacher,
                createdAt: new Date(),
                updatedAt: new Date()
            }
            
            try {
                db.attendance.insertOne(attendanceRecord)
                attendanceCount++
            } catch (error) {
                // Skip duplicate key errors
            }
        })
    })
}

print("‚úÖ Inserted " + attendanceCount + " attendance records")

// Sample Grades
var gradeTypes = ["assignment", "quiz", "exam", "project"]
var gradeCount = 0

courses.forEach(function(course, courseIndex) {
    course.students.forEach(function(studentId) {
        gradeTypes.forEach(function(gradeType) {
            var score = Math.floor(Math.random() * 20) + 80 // 80-100
            var maxScore = 100
            var percentage = (score / maxScore) * 100
            
            // Calculate letter grade
            var letterGrade
            if (percentage >= 93) letterGrade = "A"
            else if (percentage >= 90) letterGrade = "A-"
            else if (percentage >= 87) letterGrade = "B+"
            else if (percentage >= 83) letterGrade = "B"
            else if (percentage >= 80) letterGrade = "B-"
            else if (percentage >= 77) letterGrade = "C+"
            else if (percentage >= 73) letterGrade = "C"
            else if (percentage >= 70) letterGrade = "C-"
            else if (percentage >= 67) letterGrade = "D+"
            else if (percentage >= 63) letterGrade = "D"
            else if (percentage >= 60) letterGrade = "D-"
            else letterGrade = "F"
            
            var gradeRecord = {
                student: studentId,
                course: courseIds[courseIndex],
                gradeType: gradeType,
                title: gradeType.charAt(0).toUpperCase() + gradeType.slice(1) + " 1",
                score: score,
                maxScore: maxScore,
                percentage: percentage,
                letterGrade: letterGrade,
                gradedBy: course.teacher,
                createdAt: new Date(),
                updatedAt: new Date()
            }
            
            db.grades.insertOne(gradeRecord)
            gradeCount++
        })
    })
})

print("‚úÖ Inserted " + gradeCount + " grade records")

// 4. Create Admin User
print("\nüë§ Creating admin user...")

var adminUser = {
    fullName: "System Administrator",
    email: "admin@university.edu",
    passwordHash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2", // admin123
    role: "admin",
    createdAt: new Date(),
    updatedAt: new Date()
}

try {
    db.users.insertOne(adminUser)
    print("‚úÖ Admin user created successfully")
    print("üìß Email: admin@university.edu")
    print("üîë Password: admin123")
} catch (error) {
    if (error.code === 11000) {
        print("‚ÑπÔ∏è Admin user already exists")
    } else {
        print("‚ùå Error creating admin user: " + error.message)
    }
}

// 5. Display Database Statistics
print("\nüìä Database Statistics:")
print("Users: " + db.users.countDocuments())
print("Courses: " + db.courses.countDocuments())
print("Attendance Records: " + db.attendance.countDocuments())
print("Grades: " + db.grades.countDocuments())
print("Announcements: " + db.announcements.countDocuments())

print("\nüéâ Database setup completed successfully!")
print("\nüìã Next steps:")
print("1. Start your backend server: npm run dev")
print("2. Test the API endpoints")
print("3. Login with admin credentials:")
print("   - Email: admin@university.edu")
print("   - Password: admin123")
